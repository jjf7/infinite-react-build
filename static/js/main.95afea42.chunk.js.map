{"version":3,"sources":["App.js","useBookSearch.js","serviceWorker.js","index.js"],"names":["App","useState","query","setQuery","pageNumber","setPageNumber","loading","setLoading","error","setError","books","setBooks","hasMore","setHasMore","useEffect","cancel","axios","method","url","params","q","page","cancelToken","CancelToken","c","then","res","prevBooks","Set","data","docs","map","t","title","length","console","log","catch","e","isCancel","useBookSearch","observer","useRef","lastBookElementRef","useCallback","node","current","disconnect","IntersectionObserver","entries","isIntersecting","prevPageNumber","observe","type","value","onChange","target","book","index","ref","key","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.95afea42.chunk.js","sourcesContent":["import React, { useState, useRef, useCallback  } from \"react\";\nimport useBookSearch from \"./useBookSearch\";\nimport \"./App.css\";\n\nfunction App() {\n  const [query, setQuery] = useState(\"\");\n  const [pageNumber, setPageNumber] = useState(1);\n\n  const { loading, books, error, hasMore } = useBookSearch(query, pageNumber);\n\n  const observer = useRef()\n  const lastBookElementRef = useCallback(node => {\n    if (loading) return\n    if (observer.current) observer.current.disconnect()\n    observer.current = new IntersectionObserver(entries => {\n      if (entries[0].isIntersecting && hasMore) {\n        setPageNumber(prevPageNumber => prevPageNumber + 1)\n      }\n    })\n    if (node) observer.current.observe(node)\n  }, [loading, hasMore])\n\n  function handleSearch(e) {\n    setQuery(e.target.value);\n    setPageNumber(1);\n  }\n\n  return (\n    <>\n      <input type=\"text\" value={query} onChange={handleSearch}></input>\n      {books.map((book, index) => {\n        if (books.length === index + 1) {\n          return <div ref={lastBookElementRef} key={book}>{book}</div>\n        } else {\n          return <div key={book}>{book}</div>\n        }\n      })}\n      <div>{loading ? \"Loading ...\" : \"\"}</div>\n      <div>{error && \"Error ...\"}</div>\n    </>\n  );\n}\n\nexport default App;\n","import { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nexport default function useBookSearch(query, pageNumber) {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(false);\r\n    const [books, setBooks] = useState([]);\r\n    const [hasMore, setHasMore] = useState(false);\r\n\r\n    useEffect( ()=>{\r\n\r\n        setBooks([])\r\n\r\n    }, [query])\r\n\r\n    useEffect(() => {\r\n        setLoading(true);\r\n        setError(false);\r\n\r\n        let cancel;\r\n        axios({\r\n            method: \"GET\",\r\n            url: \"http://openlibrary.org/search.json\",\r\n            params: {\r\n                q: query,\r\n                page: pageNumber,\r\n            },\r\n            cancelToken: new axios.CancelToken((c) => (cancel = c)),\r\n        })\r\n            .then((res) => {\r\n                setBooks((prevBooks) => {\r\n                    return [\r\n                        ...new Set([...prevBooks, ...res.data.docs.map(t => t.title)]),\r\n                    ];\r\n                });\r\n\r\n                setHasMore (res.data.docs.length > 0 )\r\n                setLoading(false);\r\n                console.log(res.data);\r\n            })\r\n            .catch((e) => {\r\n                if (axios.isCancel(e)) return;\r\n                setError(true);\r\n            });\r\n\r\n        return () => cancel();\r\n    }, [query, pageNumber]);\r\n\r\n    return { loading, error, books, hasMore };\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}